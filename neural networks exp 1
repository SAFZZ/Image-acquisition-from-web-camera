{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled8.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyPOYO5ufvCxcpsm8InKXTKj",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/SAFZZ/Image-acquisition-from-web-camera/blob/main/neural%20networks%20exp%201\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 530
        },
        "id": "Mvntc72nYpm0",
        "outputId": "7b4f1466-6ff8-4b8b-fb63-2d2da52eafc7"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'random classification data with 2 classes')"
            ]
          },
          "metadata": {},
          "execution_count": 3
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x576 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "from sklearn import datasets\n",
        "X,y = datasets.make_blobs(n_samples=100,n_features=2,\n",
        "                          centers=2,cluster_std=1.05,\n",
        "                          random_state=2)\n",
        "fig = plt.figure(figsize=(10,8))\n",
        "plt.plot(X[:,0][y == 0], X[:, 1][y == 0], 'r^')\n",
        "plt.plot(X[:,0][y == 1], X[:,1][y == 0], 'bs')\n",
        "plt.xlabel(\"features 1\")\n",
        "plt.ylabel(\"features 2\")\n",
        "plt.title('random classification data with 2 classes')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "8t52XwNdYtba"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}